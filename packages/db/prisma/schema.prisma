generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         UserRole @default(SEEKER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  profile          Profile?
  friendProfile    Friend?
  sessionsAsSeeker Session[] @relation("SeekerSessions")
  sessionsAsFriend Session[] @relation("FriendSessions")
  reviewsGiven     Review[]  @relation("ReviewsGiven")
  reviewsReceived  Review[]  @relation("ReviewsReceived")
  // Removed payments and subscriptions for MVP
  // payments       Payment[]
  // subscriptions  Subscription[]
  reportsMade      Report[]  @relation("ReportsMade")
  reportsReceived  Report[]  @relation("ReportsReceived")
  blocksMade       Block[]   @relation("BlocksMade")
  blocksReceived   Block[]   @relation("BlocksReceived")

  @@map("users")
}

// Enum for User Roles
enum UserRole {
  SEEKER
  FRIEND
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  PREFER_NOT_TO_SAY
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  displayName String?
  bio         String?
  gender      Gender?
  interests   String[] @default([])
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}

model Friend {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Removed rate fields for MVP
  hourlyRate       Float?
  perMinuteRate    Float?
  availabilityJson String?
  specialties      String[] @default([])
  isVerified       Boolean  @default(false)
  averageRating    Float    @default(0.0)
  totalReviews     Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("friends")
}

// --- Interaction & Content Models ---

// Session model tracking interactions between a Seeker and a Friend
model Session {
  id                String            @id @default(cuid())
  seekerId          String
  // If Seeker User ID changes, update Session. If Seeker User deleted, delete Session.
  seeker            User              @relation("SeekerSessions", fields: [seekerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friendId          String // Foreign key for the friend User
  // If Friend User ID changes, update Session. If Friend User deleted, delete Session.
  friend            User              @relation("FriendSessions", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  startTime         DateTime          @default(now()) // When the session started
  endTime           DateTime? // When the session ended (nullable if ongoing)
  durationMinutes   Int? // Calculated duration in minutes
  status            SessionStatus     @default(PENDING) // Status of the session
  communicationType CommunicationType // Type of communication used
  // Removed cost for MVP
  // cost           Float?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relationships
  reviews Review[] // Reviews associated with this session
  reports Report[]

  @@map("sessions")
}

enum SessionStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  // Removed DISPUTED as it often relates to payments
}

enum CommunicationType {
  CHAT
  VOICE
  VIDEO
}

model Review {
  id         String   @id @default(cuid())
  sessionId  String?
  session    Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  reviewerId String
  reviewer   User     @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friendId   String
  friend     User     @relation("ReviewsReceived", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([sessionId, reviewerId])
  @@map("reviews")
}

// --- Payment & Subscription Models ---
// Removed Payment and Subscription models and related enums for MVP

// --- Safety & Moderation Models ---

model Report {
  id             String @id @default(cuid())
  reporterId     String
  reporter       User   @relation("ReportsMade", fields: [reporterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportedUserId String

  reportedUser User         @relation("ReportsReceived", fields: [reportedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionId    String?
  session      Session?     @relation(fields: [sessionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  reason       String
  details      String?
  status       ReportStatus @default(SUBMITTED)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("reports")
}

enum ReportStatus {
  SUBMITTED
  UNDER_REVIEW
  RESOLVED_ACTION_TAKEN
  RESOLVED_NO_ACTION
  DISMISSED
}

// Block model for users blocking each other
model Block {
  id            String   @id @default(cuid())
  blockerId     String
  blocker       User     @relation("BlocksMade", fields: [blockerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockedUserId String
  blockedUser   User     @relation("BlocksReceived", fields: [blockedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime @default(now())

  @@unique([blockerId, blockedUserId])
  @@map("blocks")
}
